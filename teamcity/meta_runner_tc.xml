<meta-runner name="Test_trigger_uetci">
  <description>Test_trigger_uetci_metarunner</description>
  <settings>
    <parameters>
      <param name="ARTIFACTORY_PASSWORD" value="******" spec="password display='hidden'" />
      <param name="ARTIFACTORY_URL" value="http://127.0.0.1:8081/artifactory/" />
      <param name="ARTIFACTORY_USER" value="admin" spec="text display='hidden' validationMode='any'" />
      <param name="DOCKER_PASSWORD" value="******" spec="password display='hidden'" />
      <param name="DOCKER_REPO" value="nginx" spec="text validationMode='any' display='normal'" />
      <param name="DOCKER_TAG" value="latest" spec="text display='normal' validationMode='any'" />
      <param name="DOCKER_USER" value="swatkiev" spec="text display='hidden' validationMode='any'" />
      <param name="system.build.vcs.number.1" value="%build.vcs.number.TestTask_MyGithub%" spec="text display='hidden' description='%build.vcs.number.TestTask_UetciPipeline%' validationMode='any'" />
    </parameters>
    <build-runners>
      <runner name="check artifactory" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#!/bin/bash

curl localhost:8082 2> /root/artifactory/test.txt
curl localhost:8082 > /root/artifactory/newtest.txt
# cat /root/artifactory/test.txt | grep "curl" > /root/artifactory/test2.txt
# OLDART=$(</root/artifactory/test2.txt)
ART=`cat /root/artifactory/test.txt | grep "curl"`
echo $ART
NEWART=`cat /root/artifactory/newtest.txt | grep "Unhealthy" | awk 'NR==1 {print $2}'`
echo $NEWART
# BADART="curl: (56) Recv failure: Connection reset by peer"
# BADART2="curl: (52) Empty reply from server"
# if [[ $OLDART == $BADART || $OLDART == $BADART2 ]]; then
if [[ $ART =~ ^curl || $NEWART =~ ^Unhealthy ]]; then
  echo "Artifactory status FAILED"
  docker-compose down
  ping -c5 127.0.0.1
  docker-compose up -d
  ping -c100 127.0.0.1
  echo "Artifactory status OK"
else
  echo "Artifactory status OK"
fi
rm -f /root/artifactory/test.txt
rm -f /root/artifactory/newtest.txt
# rm -f /root/artifactory/test2.txt]]></param>
          <param name="teamcity.build.workingDir" value="/root/artifactory" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner name="test_print_uetci" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#cd uet_ci/sandbox/test.pipeline/
#p4 trust -y
python3 trigger_uetci.py
echo "trigger_uetci.py выполнен успешно"
python3 trigger_uetci2.py
echo "trigger_uetci2.py выполнен успешно"]]></param>
          <param name="teamcity.build.workingDir" value="/opt/p4/swatkiev_uetci/" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner name="check_ssl" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[# ssl certs check
ssl-cert-check -x30 -f ssl-cert-check-domains | tee ssl_tc.txt
# teamcity backups
ls -la /opt/teamcity/backups/]]></param>
          <param name="teamcity.build.workingDir" value="/home/swatkiev/test/ssl-cert-check/" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner name="send to artifactory" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[DATE=$(date "+%%Y-%%m-%%d")
curl -X PUT -u %ARTIFACTORY_USER%:%ARTIFACTORY_PASSWORD% http://127.0.0.1:8081/artifactory/generic-local/ssl-${DATE}.txt -T ssl_tc.txt]]></param>
          <param name="teamcity.build.workingDir" value="/home/swatkiev/test/ssl-cert-check/" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner name="system report" type="simpleRunner">
        <parameters>
          <param name="script.content" value="./sysreport" />
          <param name="teamcity.build.workingDir" value="/root/bashscripting-2874016/Solutions/" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner name="clear old artifactory" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[export CI=True
jfrog rt del --spec old_files_deleted.aql --url=%ARTIFACTORY_URL% --user=%ARTIFACTORY_USER% --password=%ARTIFACTORY_PASSWORD%]]></param>
          <param name="teamcity.build.workingDir" value="/root" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner name="docker test" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[HUB_USERNAME=%DOCKER_USER%
HUB_PASSWORD=%DOCKER_PASSWORD%
HUB_REPO=%DOCKER_REPO%
HUB_TAG_0=%DOCKER_TAG%
HUB_TAG=%teamcity.build.id%
HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"$HUB_USERNAME\", \"password\": \"$HUB_PASSWORD\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
docker pull $HUB_REPO:$HUB_TAG_0
docker tag $HUB_REPO:$HUB_TAG_0 $HUB_USERNAME/$HUB_REPO:$HUB_TAG
docker tag $HUB_REPO:$HUB_TAG $HUB_USERNAME/$HUB_REPO:$HUB_TAG
docker login -u $HUB_USERNAME -p $HUB_PASSWORD
docker push $HUB_USERNAME/$HUB_REPO:$HUB_TAG
docker rmi $HUB_USERNAME/$HUB_REPO:$HUB_TAG
curl -i -X GET -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN"  https://hub.docker.com/v2/namespaces/$HUB_USERNAME/repositories/$HUB_REPO/
curl -i -X GET -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/repositories/$HUB_USERNAME/$HUB_REPO/tags/$HUB_TAG/
curl -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/repositories/$HUB_USERNAME/$HUB_REPO/tags/$HUB_TAG/
curl -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN"  https://hub.docker.com/v2/namespaces/$HUB_USERNAME/repositories/$HUB_REPO/]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner name="build_status" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[STATUS=`curl -u "%system.teamcity.auth.userId%:%system.teamcity.auth.password%" http://localhost:8111/app/rest/builds/id:%teamcity.build.id%/status`
curl -X POST "https://api.telegram.org/bot*****************/sendMessage?chat_id=*********&text=BuildStatus-$STATUS"]]></param>
          <param name="teamcity.step.mode" value="execute_if_failed" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <requirements>
      <equals id="RQ_2" name="system.agent.name" value="ubuntu_agent" />
    </requirements>
  </settings>
</meta-runner>
